load("C:/Users/baseb/Desktop/R_Analysis/01_Demo/.RData")
a<-7
print(student)
{
print(student)
combination <- sample(33:66,3)
print(combination)
}
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class){
print(x)
}
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class){
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class){
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
if(substring == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
# second letter that is an "e".
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
if(substring == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
# second letter that is an "e".
}
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
if(substring == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
# second letter that is an "e".
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
for (x in class){
print(x)
}
}
locker_combinations(students)
ggg
ds
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class){
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
clear
asd
ss
s
//
/
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class){
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
if(substring == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
# second letter that is an "e".
//
/
//
//
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
if(substring == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
# second letter that is an "e".
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class){
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
if(substring == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
# second letter that is an "e".
}
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (x in class){
print(x)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part I
students <- c("Abraham", "Beatrice", "Cory", "Dinah", "Eric", "Felicia")
roll_call <- function(class){
print(Sys.Date())
# Create a for loop
for (student in class){
print(student)
}
}
# Call the function with the student vector as an argument.
roll_call(students)
# Part II
locker_combinations <- function(class){
# Create the for loop and print the student name and locker combination.
for (student in class){
combination <- sample(33,3)
print(student)
print(combination)
}
}
# Call the function with the student vector as an argument.
locker_combinations(students)
# Part III
for (student in students){
# Create a variable (substring)  that holds the second letter for each student.
substring <- substr(student,2,2)
# Create an if statement to find the names of students where the
if(substring == 'e'){
print(student)
combination <- sample(33:66,3)
print(combination)
}
# second letter that is an "e".
}
knitr::opts_chunk$set(echo = TRUE)
students <-read_csv("Resources/students.csv")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
students <-read_csv("Resources/students.csv")
students <-read_csv("./Resources/students.csv")
students <-read_csv("../Resources/students.csv")
head(students)
# unique(dataset, variable) displays unique elements from that column
unique(students$school_name)
# Use length() to identify the number of schools
length(students$school_name)
# Use length() to identify the number of schools
length(school_count)
# Use length() to identify the number of schools
length(unique(students$school_name))
# nrow() returns the number of rows
student %>% nrow()
# nrow() returns the number of rows
students %>% nrow()
paste("There are a total of", student_count, "students.")
# nrow() returns the number of rows
student_count <- students %>% nrow()
paste("There are a total of", student_count, "students.")
mean_reading_score <- summarize(students,mean(reading_score))
paste("The average reading score is", mean_reading_score)
mean_math_score <- summarize(students,mean(math_score))
paste("The average math score is", mean_math_score)
passing_reading <- filter(students, reading_score>=70)
passing_reading_count <- nrow(passing_reading)
percentage_passing_reading <- passing_reading_count*100/student_count
paste(percentage_passing_reading, "% of the students have passing reading scores.")
passing_math <- filter(students, math_score>=70)
passing_math_count <- nrow(passing_math)
percentage_passing_math <- passing_math_count*100/student_count
paste(percentage_passing_math, "% of the students have passing math scores.")
passing_overall <- filter(students, math_score>=70 & reading_score>=70)
passing_overall_count <- nrow(passing_overall)
percentage_passing_overall <- passing_overall_count*100/student_count
paste(percentage_passing_overall, "% of the students have passing math and reading scores.")
group <- group_by(students, school_name)
schoolgroup <- group_by(students, school_name)
summarize(schoolgroup, avg.reading=mean(reading_score), avg.math = mean(math_score))
gradegroup <- group_by(students, grade)
summarize(gradegroup, avg.reading=mean(reading_score), avg.math=mean(math_score))
setwd("C:/Users/baseb/Desktop/Analysis Projects/MechaCar_Statistical_Analysis")
setwd("C:/Users/baseb/Desktop/Analysis Projects/MechaCar_Statistical_Analysis")
library(dbplyr)
mechacar <- read.csv('MechaCar_mpg.csv')
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechacar)
summary(model)
summary(model)
library(dbplyr)
mechacar <- read.csv('MechaCar_mpg.csv')
model <- lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = mechacar)
summary(model)
